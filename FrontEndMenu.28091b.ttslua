function onLoad(saved_game_data)
  --ShowMainMenu()

  -- List which contains a map of {["Character", "Player"]} for each selection, in the order that they were clicked
  selected_character_map = {}
  ascensionLevel = 0
end

function AddCharacterSelected(character, playerColor)
  for idx, charInfo in ipairs(selected_character_map) do
    if charInfo["Player"] == playerColor then
      RemoveCharacterSelected(charInfo["Character"])
    end
  end

  log("Setting " .. tostring(playerColor) .. " to " ..tostring(character))
  table.insert(selected_character_map, {["Character"] = character, ["Player"] = playerColor})

  -- Highlight the character
  self.UI.setAttribute("Outline_"..character, "color", playerColor)
  self.UI.setAttributes("Button_"..character, {["color"]=playerColor, ["textColor"]="White"})
end

function RemoveCharacterSelected(character)
  for idx, charInfo in ipairs(selected_character_map) do
    if charInfo["Character"] == character then
      table.remove(selected_character_map, idx)

      -- Unhighlight the character
      self.UI.setAttribute("Outline_"..character, "color", "rgba(0, 0, 0, 0)")
      self.UI.setAttributes("Button_"..character, {["color"]="White", ["textColor"]="Black"})

      log("Removing " .. tostring(playerColor) .. " from " ..tostring(character))
    end
  end
end

function getPlayerForCharacter(character)
  for idx, charInfo in ipairs(selected_character_map) do
    if charInfo["Character"] == character then
      return charInfo["Player"]
    end
  end
  return nil
end

function getCharacterForPlayer(player)
  for idx, charInfo in ipairs(selected_character_map) do
    if charInfo["Player"] == player then
      return charInfo["Character"]
    end
  end
  return nil
end

function AttemptSelectCharacter(player, character)
  if player.color ~= "Pink" and player.color ~= "Red" and player.color ~= "Blue" and player.color ~= "Green" then
    broadcastToColor("Please sit in one of the player seats (Pink, Red, Blue, or Green) in order to play and select a character.", player.color)
    return
  end

  local curPlayerForCharacter = getPlayerForCharacter(character)
  if curPlayerForCharacter == player.color then
    RemoveCharacterSelected(character, player.color)
  elseif curPlayerForCharacter == nil then
    AddCharacterSelected(character, player.color)
  else
    broadcastToColor(tostring(character) .. " has already been selected by " .. tostring(curPlayerForCharacter), player.color)
  end

  -- If more than 1 character selected, hide the solo mode toggles
  if #selected_character_map > 1 then
    self.UI.setAttribute("soloMode", "active", "false")
    self.UI.setAttribute("soloModeText", "active", "false")
  else
    self.UI.setAttribute("soloMode", "active", "true")
    self.UI.setAttribute("soloModeText", "active", "true")
  end
end

function soloModeChanged(player, value)
  self.UI.setAttribute("soloMode", "isOn", value)
end

function CharacterSelect_Ironclad(player)
  AttemptSelectCharacter(player, "Ironclad")
end

function CharacterSelect_Silent(player)
  AttemptSelectCharacter(player, "Silent")
end

function CharacterSelect_Defect(player)
  AttemptSelectCharacter(player, "Defect")
end

function CharacterSelect_Watcher(player)
  AttemptSelectCharacter(player, "Watcher")
end

function updateAscension(player, value)
  self.UI.setAttribute("ascensionText", "text", "Ascension: " .. tostring(value))
  self.UI.setAttribute("ascensionSlider", "value", value)
  ascensionLevel = tonumber(value)

  local sliderColor = "Red"
  if tonumber(value) <= 3 then
    sliderColor = "Green"
  elseif tonumber(value) <= 7 then
    sliderColor = "Yellow"
  end
  self.UI.setAttributes("ascensionSlider", {["fillColor"] = sliderColor, ["handleColor"] = sliderColor})
end

function StartGame()
  if #selected_character_map >= 1 then
    local soloMode = self.UI.getAttribute("soloMode", "isOn")
    Global.call("StartGame", {ascensionLevel, selected_character_map, soloMode})

    local frontEndMenuCardObj = getObjectFromGUID("1c1c13")
    frontEndMenuCardObj.destruct()
    self.destruct()
  else
    broadcastToAll("Unable to start game. No characters selected.")
    return
  end
end