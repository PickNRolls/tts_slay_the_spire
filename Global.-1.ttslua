CHARACTERS = {"Ironclad", "Silent", "Defect", "Watcher"}

GAME_DATA = {
  act = 1,
  players = {
    Red = {},
    Green = {},
    Blue = {},
    Pink = {}
  }
}


OBJECTS = {
  startMenu = "1c1c13",

  characterBoards = {
    [CHARACTERS[1]] = "63f2c4",
    [CHARACTERS[2]] = "9ee996",
    [CHARACTERS[3]] = "b293d2",
    [CHARACTERS[4]] = "60b3de"
  },
  characterBags = {
    [CHARACTERS[1]] = "a29133",
    [CHARACTERS[2]] = "6a89d8",
    [CHARACTERS[3]] = "0f270c",
    [CHARACTERS[4]] = "f37f4f"
  },
  characterFigures = {
    [CHARACTERS[1]] = "b9ce26",
    [CHARACTERS[2]] = "64b541",
    [CHARACTERS[3]] = "5a68a5",
    [CHARACTERS[4]] = "410585"
  },

  playerHands = {
    Red = "198286",
    Green = "761a86",
    Blue = "507348",
    Pink = "32fa24"
  },

  playerGoldBowls = {
    Red = nil,
    Green = nil,
    Blue = nil,
    Pink = nil,
  },
  playerGoldBowlScriptingZones = {
    Red = nil,
    Green = nil,
    Blue = nil,
    Pink = nil
  },

  boot = "d4e0e6",
  goldBag1 = "3c7af8",
  goldBag5 = "4aeac9",

  actMaps = {
    "0b5712",
    "9a9d69",
    "7ed624"
  },
  actDecksBag = {
    {
      base = "7def40",
      ascension = "e4892b"
    },
    {
      base = "bc0921",
      ascension = "a9f893"
    },
    {
      base = "4d2c55",
      ascension = "1efef1"
    },
    {
      base = "c9e668",
      ascension = "ab1455"
    }
  },

  whiteMapTokensBag = "021340",
  blackMapTokensBag = "b4d7e7",

  neowBlessingDeck = "938861"
}

EFFECT_TYPES = {
  GAIN_GOLD = "gain gold",
  GAIN_CURSE = "gain curse",
  GAIN_RANDOM_POTION = "gain random potion",
  GAIN_CARD = "gain card",
  GAIN_RANDOM_CARD = "gain random card",
  GAIN_RARE_CARD = "gain rare card",
  GAIN_RANDOM_RARE_CARD = "gain random rare card",
  GAIN_COLORLESS_CARD = "gain colorless card",
  GAIN_RANDOM_COLORLESS_CARD = "gain random colorless card",
  GAIN_TREASURE = "gain treasure",
  UPGRADE_CARD = "upgrade card",
  UPGRADE_RANDOM_CARD = "upgrade random card",
  TRANSFORM_CARD = "transform card",
  LOSE_HP = "lose hp",
  LOSE_GOLD = "lose gold",
  REMOVE_CARD = "remove card",
}
TARGET_TYPES = {
  PLAYER = "Player"
}

CARDS_DATA = {
  neowBlessing = {
    ["998a64"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_RANDOM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE,
          }
        }
      }
    },
    ["6eeb68"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_POTION,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.TRANSFORM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE
          }
        }
      }
    },
    ["c21e95"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_RARE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 10
            }
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE
          }
        }
      }
    },
    ["199138"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_RARE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_TREASURE,
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["09c40f"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["9ce0e5"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_RANDOM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["cdd020"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      },
      {
        lastButtonBigger = true
      }
    },
    ["c60c9d"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.TRANSFORM_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 8
            }
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["f66dd3"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_POTION,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_TREASURE
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["ad34d0"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.TRANSFORM_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_POTION,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RARE_CARD
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE
          }
        }
      }
    },
    ["89a376"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_RARE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      }
    },
    ["29021f"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_COLORLESS_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        lastButtonBigger = true
      }
    },
    ["2b8654"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RARE_CARD,
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      }
    },
    ["b50bdb"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_POTION,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_TREASURE
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE
          }
        }
      }
    },
    ["ed4ffd"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.TRANSFORM_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_RANDOM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      }
    },
    ["e7c18a"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_TREASURE,
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      }
    }
  }
}

function waitFrames(frames) --This function can only be used inside a coroutine because it is using coroutine.yield()
   while frames > 0 do --loop until frames = 0
      coroutine.yield(0) --this will wait 1 frame, reguardless of the number put inside coroutine.yield(#)
      frames = frames - 1 --decrement frames every loop
   end
end

function getPositionForGoldGain(arguments)
  local bowl = arguments.bowl
  local bowlBounds = bowl.getBounds()
  local playerBowlPosition = bowl.getPosition()
  local index = arguments.index or 0
  local position = {
    x = playerBowlPosition.x,
    y = playerBowlPosition.y + 3 + index * 0.3,
    z = playerBowlPosition.z,
  }
  return position
end

function handleEffect(arguments)
  function handleEffectCoroutine()
    local effect = arguments.effect
    local target = arguments.target

    if target.type == TARGET_TYPES.PLAYER then
      if target.payload == nil or target.payload.color == nil then
        return 1
      end

      local color = target.payload.color
      local amount = 1
      if effect.payload ~= nil and effect.payload.amount ~= nil then
        amount = effect.payload.amount
      end

      if effect.type == EFFECT_TYPES.GAIN_GOLD then
        local goldBag1 = getObjectFromGUID(OBJECTS.goldBag1)
        local goldBag5 = getObjectFromGUID(OBJECTS.goldBag5)
        local remainingGold1 = #goldBag1.getObjects()
        local remainingGold5 = #goldBag5.getObjects()
        local remainingGoldTotal = remainingGold1 + remainingGold5 * 5

        local playerBowl = getObjectFromGUID(OBJECTS.playerGoldBowls[color])

        if amount >= 5 and remainingGold5 == 0 then
          if remainingGold1 ~= 0 then
            local index = 0
            while remainingGold1 ~= 0 and amount ~= 0 do
              goldBag1.takeObject({
                position = getPositionForGoldGain({
                  bowl = playerBowl,
                  index = index
                })
              })
              amount = amount - 1
              remainingGold1 = remainingGold1 - 1
              index = index + 1
              waitFrames(2)
            end
            return 1
          end
          print("Out of Gold. Can't gain any more.")
          return 1
        end

        if amount >= 5 then
          goldBag5.takeObject({
            position = getPositionForGoldGain({
              bowl = playerBowl
            })
          })
          amount = amount - 5
        end

        if amount == 0 then
          return 1
        end

        local index = 0
        while remainingGold1 ~= 0 and amount ~= 0 do
          goldBag1.takeObject({
            position = getPositionForGoldGain({
              bowl = playerBowl,
              index = index
            })
          })
          amount = amount - 1
          remainingGold1 = remainingGold1 - 1
          index = index + 1
          waitFrames(2)
        end
        return 1
      end
    end
  end

  startLuaCoroutine(self, "handleEffectCoroutine")
end

function onLoad()
  for index, color in ipairs({ "Red", "Green", "Blue", "Pink" }) do
    local handZone = getObjectFromGUID(OBJECTS.playerHands[color])
    handZone.setScale({
      x = 15.3268948,
      y = 11.8970528,
      z = 6.35014534
    })
    handZone.setPosition({
      x = -60 + 24 * index,
      y = 3.29337835,
      z = -34.42515,
    })
    handZone.setRotation({
      x = 0,
      y = 180,
      z = 0
    })
  end

  local boot = getObjectFromGUID(OBJECTS.boot)
  boot.use_snap_points = true
end

function getAssignedCharacterToPlayer(arguments)
  local color = arguments.color
  return GAME_DATA.players[color].character
end

function canAssignCharacterToPlayer(arguments)
  local character = arguments.character
  local color = arguments.color
  for color, data in pairs(GAME_DATA.players) do
    if data.character ~= nil and data.character == character then
      return false
    end
  end
  return true
end

function assignCharacterToPlayer(arguments)
  local character = arguments.character
  local color = arguments.color
  GAME_DATA.players[color].character = character
end

function canUnsignCharacterFromPlayer(arguments)
  local character = arguments.character
  local color = arguments.color

  return GAME_DATA.players[color].character ~= nil and
    GAME_DATA.players[color].character == character
end

function unsignCharacterFromPlayer(arguments)
  local color = arguments.color

  GAME_DATA.players[color].character = nil
end

function setupPlayerDecks(arguments)
  local color = arguments.color

  local handZone = getObjectFromGUID(OBJECTS.playerHands[color])
  local handZonePosition = handZone.getPosition()
  local character = GAME_DATA.players[color].character
  local characterBoard = getObjectFromGUID(OBJECTS.characterBoards[character])
  local characterBag = getObjectFromGUID(OBJECTS.characterBags[character])
  local boardBounds = characterBoard.getBoundsNormalized()

  local decksPosition = {
    x = handZonePosition.x - boardBounds.size.x / 2 - 1.2,
    y = handZonePosition.y,
    z = handZonePosition.z + 16
  }
  local starterDeck = characterBag.takeObject({
    position = decksPosition,
    rotation = {
      x = 0,
      y = 180,
      z = 180
    }
  })
  starterDeck.interactable = false
  starterDeck.shuffle()

  local rewardsDeck = characterBag.takeObject({
    position = {
      x = decksPosition.x,
      y = decksPosition.y,
      z = decksPosition.z + 4
    },
    rotation = {
      x = 0,
      y = 180,
      z = 180
    }
  })
  rewardsDeck.interactable = false
  rewardsDeck.shuffle()

  local rareDeck = characterBag.takeObject({
    position = {
      x = decksPosition.x,
      y = decksPosition.y,
      z = decksPosition.z + 8
    },
    rotation = {
      x = 0,
      y = 180,
      z = 180
    }
  })
  rareDeck.interactable = false
  rareDeck.shuffle()
end

function getMapBossPosition(arguments)
  local mapObject = arguments.mapObject
  local startPosition = getMapStartPosition({
    mapObject = mapObject
  })
  return {
    x = startPosition.x + 0.25,
    y = startPosition.y,
    z = startPosition.z + 24
  }
end

function getMapCharacterPositions(arguments)
  local mapObject = arguments.mapObject
  local bounds = mapObject.getBounds()
  local position = mapObject.getPosition()
  local scale = mapObject.getScale()

  local positions = {}
  local positionsDone = 0
  while positionsDone ~= 4 do
    table.insert(positions, {
      x = position.x + bounds.size.x / 2 - 0.1 * scale.x,
      y = position.y,
      z = position.z - bounds.size.z / 2 + (0.2 + positionsDone * 0.435) * scale.z,
    })
    positionsDone = positionsDone + 1
  end
  return positions
end

function getMapCharacterSnapPoints(arguments)
  local mapObject = arguments.mapObject
  local characterPositions = getMapCharacterPositions({
    mapObject = mapObject
  })
  local snapPoints = {}
  for index, position in ipairs(characterPositions) do
    table.insert(snapPoints, {
      position = mapObject.positionToLocal(position)
    })
  end
  return snapPoints
end

function setupPlayerPlayZone(arguments)
  local color = arguments.color
  local playerBoard = getObjectFromGUID(OBJECTS.characterBoards[GAME_DATA.players[color].character])
  local playerBoardPosition = playerBoard.getPosition()
  local playerBoardBounds = playerBoard.getBounds()
  spawnObject({
    type = "ScriptingTrigger",
    position = {
      x = playerBoardPosition.x,
      y = playerBoardPosition.y,
      z = playerBoardPosition.z + playerBoardBounds.size.z / 2 + 6
    },
    scale = { 12, 0.7, 10 },
    callback_function = function(zone)
      local bounds = zone.getBounds()
      local position = zone.getPosition()

      playerBoard.UI.setAttribute("main", "active", "true")
    end
  })
end

function handleNeowFirstClick(neowCard, color)
  log(JSON.encode_pretty(CARDS_DATA.neowBlessing[neowCard.guid][1]))
end

function handleNeowSecondClick(neowCard, color)
  log(JSON.encode_pretty(CARDS_DATA.neowBlessing[neowCard.guid][2]))
end

function handleNeowThirdClick(neowCard, color)
  log(JSON.encode_pretty(CARDS_DATA.neowBlessing[neowCard.guid][3]))
end

function setupPlayers(arguments)
  local players = arguments.players
  local act = arguments.act
  function setupPlayersCoroutine()
    Hands.enable = true
    for index, color in ipairs(players) do
      local character = GAME_DATA.players[color].character
      local characterBoard = getObjectFromGUID(OBJECTS.characterBoards[character])
      characterBoard.call("setupForPlayer", {
        color = color
      })
    end

    waitFrames(500)

    local actMap = getObjectFromGUID(OBJECTS.actMaps[act])
    local characterPositions = getMapCharacterPositions({
      mapObject = actMap
    })
    for index, color in ipairs(players) do
      local playerFigure = getObjectFromGUID(OBJECTS.characterFigures[GAME_DATA.players[color].character])
      local position = characterPositions[index]
      playerFigure.scale(1.4)
      playerFigure.setPositionSmooth({
        x = position.x,
        y = position.y + 2,
        z = position.z
      })
    end

    local neowBlessingDeck = getObjectFromGUID(OBJECTS.neowBlessingDeck)
    neowBlessingDeck.shuffle()
    for index, color in ipairs(players) do
      setupPlayerDecks({
        color = color
      })
      local characterBoard = getObjectFromGUID(OBJECTS.characterBoards[GAME_DATA.players[color].character])
      local boardPosition = characterBoard.getPosition()
      local boardBounds = characterBoard.getBounds()

      local bowl = spawnObject({
        type = "Bowl",
        scale = {
          0.7, 0.7, 0.7
        },
        position = {
          x = boardPosition.x + boardBounds.size.x / 2 + 1.6,
          y = boardPosition.y,
          z = boardPosition.z + 2
        },
        callback_function = function(object)
          log("Gold bowl spawned for player("..color.."): "..object.guid..".")
          object.locked = true
          local bounds = object.getBounds()
          local position = object.getPosition()
          local zone = spawnObject({
            type = "ScriptingTrigger",
            scale = {
              bounds.size.x, bounds.size.y + 5, bounds.size.z
            },
            position = position,
            callback_function = function(scriptingZone)
              log("Gold bowl scripting zone spawned for player("..color.."): "..scriptingZone.guid..".")
            end
          })
          OBJECTS.playerGoldBowlScriptingZones[color] = zone.guid
        end
      })
      OBJECTS.playerGoldBowls[color] = bowl.guid

      local neowCard = neowBlessingDeck.takeObject({
        position = {
          x = boardPosition.x,
          y = boardPosition.y,
          z = boardPosition.z + 10
        },
        flip = true
      })
      local neowCardScale = neowCard.getScale().x
      if (neowCardScale < 2) then
        neowCard.scale(3)
      end
      neowCard.locked = true
      waitFrames(250)
      local buttonPositions = {
        {
          0.02, 0.6, 0.868
        },
        {
          0.02, 0.6, 1.08
        },
        {
          0.02, 0.6, 1.314
        }
      }
      local buttonScales = {
        { 1, 1, 0.7 },
        { 1, 1, 0.7 },
        { 1, 1, 0.7 }
      }
      if CARDS_DATA.neowBlessing[neowCard.guid][4] ~= nil and
        CARDS_DATA.neowBlessing[neowCard.guid][4].lastButtonBigger then
          buttonPositions[1][3] = 0.786
          buttonPositions[2][3] = 1
          buttonPositions[3][3] = 1.28
          buttonScales[3][3] = 1.3
      end
      neowCard.createButton({
        click_function = "handleNeowFirstClick",
        function_owner = self,
        width = 900,
        height = 7,
        position = buttonPositions[1],
        color = { 0, 0, 0, 0 },
        scale = buttonScales[1]
      })
      neowCard.createButton({
        click_function = "handleNeowSecondClick",
        function_owner = self,
        width = 900,
        height = 7,
        position = buttonPositions[2],
        color = { 0, 0, 0, 0 },
        scale = buttonScales[2]
      })
      neowCard.createButton({
        click_function = "handleNeowThirdClick",
        function_owner = self,
        width = 900,
        height = 7,
        position = buttonPositions[3],
        color = { 0, 0, 0, 0 },
        scale = buttonScales[3]
      })

      handleEffect({
        effect = {
          type = EFFECT_TYPES.GAIN_GOLD,
          payload = {
            amount = 3
          }
        },
        target = {
          type = TARGET_TYPES.PLAYER,
          payload = {
            color = color
          }
        }
      })
    end

    return 1
  end

  startLuaCoroutine(self, "setupPlayersCoroutine")
end

function setupMapCharacterSnapPoints(arguments)
  local mapObject = arguments.mapObject
  local characterSnapPoints = getMapCharacterSnapPoints({
    mapObject = mapObject
  })
  local snapPoints = mapObject.getSnapPoints()
  for index = 1, #characterSnapPoints do
    snapPoints[#snapPoints + 1] = characterSnapPoints[index]
  end
  mapObject.setSnapPoints(snapPoints)
end

function getMapStartPosition(arguments)
  local mapObject = arguments.mapObject
  local position = mapObject.getPosition()
  local bounds = mapObject.getBounds()

  return {
    x = position.x - 1.3,
    y = position.y + bounds.size.y,
    z = position.z - bounds.size.z / 2 + 1.75
  }
end

function setupAct(arguments)
  function setupActCoroutine()
    local act = arguments.act
    local actMap = getObjectFromGUID(OBJECTS.actMaps[act])
    local tableObject = Tables.getTableObject()
    local tableBounds = tableObject.getBounds()

    actMap.scale(1.7)
    local actMapBounds = actMap.getBounds()
    actMap.setPositionSmooth({
      x = -tableBounds.size.x / 2 + actMapBounds.size.x / 2 + 18,
      y = 2,
      z = tableBounds.center.z + 9,
    })
    actMap.interactable = false

    waitFrames(550)
    actMap.locked = true
    actMap.call("setup")
    local bootObject = getObjectFromGUID(OBJECTS.boot)
    bootObject.setPositionSmooth(getMapStartPosition({
      mapObject = actMap
    }))

    local actDecksBag = getObjectFromGUID(OBJECTS.actDecksBag[act].base)
    local bossMapPosition = getMapBossPosition({
      mapObject = actMap
    })
    local bossDeck = actDecksBag.takeObject({
      position = bossMapPosition
    })
    bossDeck.shuffle()
    local bossObject = bossDeck.takeObject({
      position = {
        x = bossMapPosition.x,
        y = bossMapPosition.y,
        z = bossMapPosition.z + 0.5
      }
    })
    actDecksBag.putObject(bossDeck)
    bossObject.scale(1.6)

    local mapRotation = actMap.getRotation()
    local whiteTokensBag = getObjectFromGUID(OBJECTS.whiteMapTokensBag)
    whiteTokensBag.shuffle()
    local startRelativePositions = actMap.getTable("START_RELATIVE_POSITIONS");
    local whiteTokenWorldPositions = actMap.call("startRelativePositionsToWorld", {
      positions = startRelativePositions.whiteTokens
    })
    local whiteTokensBag = getObjectFromGUID(OBJECTS.whiteMapTokensBag)
    whiteTokensBag.shuffle()
    local blackTokenWorldPositions = actMap.call("startRelativePositionsToWorld", {
      positions = startRelativePositions.blackTokens
    })
    local blackTokensBag = getObjectFromGUID(OBJECTS.blackMapTokensBag)
    blackTokensBag.shuffle()

    for index, position in ipairs(whiteTokenWorldPositions) do
      whiteTokensBag.takeObject({
        position = position,
        rotation = mapRotation
      })
    end
    for index, position in ipairs(blackTokenWorldPositions) do
      blackTokensBag.takeObject({
        position = position,
        rotation = mapRotation
      })
    end

    return 1
  end

  startLuaCoroutine(self, "setupActCoroutine")
end

function onObjectEnterZone(zone, object)

end

function startGame()
  log("Starting game...")
  local allPlayers = {}
  for color, data in pairs(GAME_DATA.players) do
    if data.character ~= nil then
      table.insert(allPlayers, color)
    end
  end
  local startMenu = getObjectFromGUID(OBJECTS.startMenu)
  startMenu.destruct()
  setupAct({
    act = GAME_DATA.act
  })
  setupPlayers({
    players = allPlayers,
    act = GAME_DATA.act
  })
end
