CHARACTERS = {"Ironclad", "Silent", "Defect", "Watcher"}

GAME_DATA = {
  act = 1,
  isFirstEncounterDone = false,
  combat = {
    inProgress = false,
    encountersSetup = 0,
    summonQueue = {},
    enemies = {},
    reducedCards = {}
  },
  players = {
    Red = {
      neowBonusDone = false
    },
    Green = {
      neowBonusDone = false
    },
    Blue = {
      neowBonusDone = false
    },
    Pink = {
      neowBonusDone = false
    }
  }
}

OBJECTS = {
  startMenu = "1c1c13",

  characterBoards = {
    [CHARACTERS[1]] = "63f2c4",
    [CHARACTERS[2]] = "9ee996",
    [CHARACTERS[3]] = "b293d2",
    [CHARACTERS[4]] = "60b3de"
  },
  characterBags = {
    [CHARACTERS[1]] = "a29133",
    [CHARACTERS[2]] = "6a89d8",
    [CHARACTERS[3]] = "0f270c",
    [CHARACTERS[4]] = "f37f4f"
  },
  characterFigures = {
    [CHARACTERS[1]] = "b9ce26",
    [CHARACTERS[2]] = "64b541",
    [CHARACTERS[3]] = "5a68a5",
    [CHARACTERS[4]] = "410585"
  },
  characterDecks = {
    [CHARACTERS[1]] = {
      starterDeck = nil,
      rewardsDeck = nil,
      rareDeck = nil,
    },
    [CHARACTERS[2]] = {
      starterDeck = nil,
      rewardsDeck = nil,
      rareDeck = nil,
    },
    [CHARACTERS[3]] = {
      starterDeck = nil,
      rewardsDeck = nil,
      rareDeck = nil,
    },
    [CHARACTERS[4]] = {
      starterDeck = nil,
      rewardsDeck = nil,
      rareDeck = nil,
    }
  },

  playerHands = {
    Red = "198286",
    Green = "761a86",
    Blue = "507348",
    Pink = "32fa24"
  },
  playerGoldBowls = {
    Red = nil,
    Green = nil,
    Blue = nil,
    Pink = nil,
  },
  playerGoldBowlScriptingZones = {
    Red = nil,
    Green = nil,
    Blue = nil,
    Pink = nil
  },
  playerNeowBlessingCard = {
    Red = nil,
    Green = nil,
    Blue = nil,
    Pink = nil
  },

  boot = "d4e0e6",
  goldBag1 = "3c7af8",
  goldBag5 = "4aeac9",

  actMaps = {
    "0b5712",
    "9a9d69",
    "7ed624"
  },
  actDecksBag = {
    {
      base = "7def40",
      ascension = "e4892b"
    },
    {
      base = "bc0921",
      ascension = "a9f893"
    },
    {
      base = "4d2c55",
      ascension = "1efef1"
    },
    {
      base = "c9e668",
      ascension = "ab1455"
    }
  },
  firstEncounterBag = "580dd2",

  whiteMapTokensBag = "021340",
  blackMapTokensBag = "b4d7e7",

  neowBlessingDeck = "938861",

  combat = {
    zoneToEnemy = {},
    enemyToZone = {},
  }
}

EFFECT_TYPES = {
  GAIN_GOLD = "gain gold",
  GAIN_CURSE = "gain curse",
  GAIN_RANDOM_POTION = "gain random potion",
  GAIN_CARD = "gain card",
  GAIN_RANDOM_CARD = "gain random card",
  GAIN_RARE_CARD = "gain rare card",
  GAIN_RANDOM_RARE_CARD = "gain random rare card",
  GAIN_COLORLESS_CARD = "gain colorless card",
  GAIN_RANDOM_COLORLESS_CARD = "gain random colorless card",
  GAIN_TREASURE = "gain treasure",
  UPGRADE_CARD = "upgrade card",
  UPGRADE_RANDOM_CARD = "upgrade random card",
  TRANSFORM_CARD = "transform card",
  LOSE_HP = "lose hp",
  LOSE_GOLD = "lose gold",
  REMOVE_CARD = "remove card",
}

TARGET_TYPES = {
  PLAYER = "Player"
}

TAG_TYPES = {
  FIRST_ENCOUNTER = "First Encounter",
  ENCOUNTER = "Encounter",
  SUMMON = "Summon",
  ELITE = "Elite",
  BOSS = "Boss"
}

ACTION_TYPES = {
  HIT = "Hit",
  WEAK = "Weak",
  DAZED = "Dazed",
}

REWARD_TYPES = {
  POTION = "Potion",
  CARD = "Card",
}

CARDS_DATA = {
  acts = {
    ["First Encounter"] = {
      Encounter = {
        ["Small Slime"] = {
          name = "Small Slime",
          rewards = {
            REWARD_TYPES.POTION,
            REWARD_TYPES.CARD,
          },
          everyTurnActions = {
            {
              type = ACTION_TYPES.HIT,
              power = 2,
            }
          },
          summons = {
            {
              variants = {
                "Acid Slime 1",
                "Acid Slime 2",
                "Acid Slime 3",
                "Acid Slime 4"
              },
              amount = 1
            }
          },
          hp = 3
        },
        ["Cultist"] = {
          name = "Cultist",
          hp = 9,
          everyTurnActions = { {
            type = "Hit",
            power = 1
          }, {
            type = "Buff"
          } },
          rewards = { {
            type = "Gold",
            amount = 1
          }, {
            type = "Card"
          } }
        },
        ["Jaw Worm"] = {
          name = "Jaw Worm",
          hp = 8,
          dieActions = {
            ["1"] = { {
              type = "Block",
              power = 2
            }, {
              type = "Buff"
            } },
            ["2"] = { {
              type = "Block",
              power = 2
            }, {
              type = "Buff"
            } },
            ["3"] = { {
              type = "Hit",
              power = 2
            }, {
              type = "Block",
              power = 1
            } },
            ["4"] = { {
              type = "Hit",
              power = 2
            }, {
              type = "Block",
              power = 1
            } },
            ["5"] = { {
              type = "Hit",
              power = 3
            } },
            ["6"] = { {
              type = "Hit",
              power = 3
            } }
          },
          rewards = { {
            type = "Gold",
            amount = 1
          }, {
            type = "Potion"
          }, {
            type = "Card"
          } }
        },
        ["Red Louse"] = {
          name = "Red Louse",
          hp = 3,
          dieActions = {
            ["1"] = { {
              type = "Buff"
            } },
            ["2"] = { {
              type = "Buff"
            } },
            ["3"] = { {
              type = "Hit",
              power = 2
            } },
            ["4"] = { {
              type = "Hit",
              power = 2
            } },
            ["5"] = { {
              type = "Hit",
              power = 1
            } },
            ["6"] = { {
              type = "Hit",
              power = 1
            } }
          },
          abilities = { "Curl Up" },
          summons = { {
            variants = { "Green Louse 1", "Green Louse 2" },
            amount = 1
          } },
          rewards = { {
            type = "Gold",
            amount = 1
          }, {
            type = "Card"
          } }
        }
      }
    },
    ["1"] = {
      Summon = {
        ["Green Louse 1"] = {
    name = "Green Louse 1",
    hp = 3,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 2
      } },
      ["2"] = { {
        type = "Hit",
        power = 2
      } },
      ["3"] = { {
        type = "Hit",
        power = 1
      } },
      ["4"] = { {
        type = "Hit",
        power = 1
      } },
      ["5"] = { {
        type = "Weak"
      } },
      ["6"] = { {
        type = "Weak"
      } }
    },
    abilities = { "Curl Up" }
  },
  ["Green Louse 2"] = {
    name = "Green Louse 2",
    hp = 3,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 1
      } },
      ["2"] = { {
        type = "Hit",
        power = 1
      } },
      ["3"] = { {
        type = "Weak"
      } },
      ["4"] = { {
        type = "Weak"
      } },
      ["5"] = { {
        type = "Hit",
        power = 2
      } },
      ["6"] = { {
        type = "Hit",
        power = 2
      } }
    },
    abilities = { "Curl Up" }
  },
  ["Sneaky Gremlin"] = {
    name = "Sneaky Gremlin",
    hp = 2,
    everyTurnActions = { {
      type = "Hit",
      power = 2
    } }
  },
  ["Fat Gremlin"] = {
    name = "Fat Gremlin",
    hp = 2,
    everyTurnActions = { {
      type = "Hit",
      power = 1
    }, {
      type = "Weak"
    } }
  },
  ["Sentry B"] = {
    name = "Sentry B",
    hp = 8,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 3
      } },
      ["2"] = { {
        type = "Hit",
        power = 3
      } },
      ["3"] = { {
        type = "Hit",
        power = 3
      } },
      ["4"] = { {
        type = "Dazed"
      } },
      ["5"] = { {
        type = "Dazed"
      } },
      ["6"] = { {
        type = "Dazed"
      } }
    }
  },
  ["Spike Slime 3"] = {
    name = "Spike Slime 3",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Vulnerable"
      } },
      ["2"] = { {
        type = "Vulnerable"
      } },
      ["3"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Dazed"
      } },
      ["4"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Dazed"
      } },
      ["5"] = { {
        type = "Hit",
        power = 2
      } },
      ["6"] = { {
        type = "Hit",
        power = 2
      } }
    }
  },
  ["Spike Slime 1"] = {
    name = "Spike Slime 1",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Vulnerable"
      } },
      ["2"] = { {
        type = "Vulnerable"
      } },
      ["3"] = { {
        type = "Hit",
        power = 2
      } },
      ["4"] = { {
        type = "Hit",
        power = 2
      } },
      ["5"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Dazed"
      } },
      ["6"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Dazed"
      } }
    }
  },
  ["Spike Slime 2"] = {
    name = "Spike Slime 2",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Dazed"
      } },
      ["2"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Dazed"
      } },
      ["3"] = { {
        type = "Vulnerable"
      } },
      ["4"] = { {
        type = "Vulnerable"
      } },
      ["5"] = { {
        type = "Hit",
        power = 2
      } },
      ["6"] = { {
        type = "Hit",
        power = 2
      } }
    }
  },
  ["Spike Slime 4"] = {
    name = "Spike Slime 4",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 2
      } },
      ["2"] = { {
        type = "Hit",
        power = 2
      } },
      ["3"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Dazed"
      } },
      ["4"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Dazed"
      } },
      ["5"] = { {
        type = "Vulnerable"
      } },
      ["6"] = { {
        type = "Vulnerable"
      } }
    }
  },
  ["Mad Gremlin"] = {
    name = "Mad Gremlin",
    hp = 5,
    everyTurnActions = { {
      type = "Hit",
      power = 1
    } },
    abilities = { "Angry" }
  },
  ["Red Louse"] = {
    name = "Red Louse",
    hp = 3,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 2
      } },
      ["2"] = { {
        type = "Hit",
        power = 2
      } },
      ["3"] = { {
        type = "Hit",
        power = 1
      } },
      ["4"] = { {
        type = "Hit",
        power = 1
      } },
      ["5"] = { {
        type = "Buff"
      } },
      ["6"] = { {
        type = "Buff"
      } }
    },
    cubeActions = { {
      type = ""
    }, {
      type = ""
    } },
    abilities = { "Curl Up" }
  },
  ["Sentry A"] = {
    name = "Sentry A",
    hp = 8,
    dieActions = {
      ["1"] = { {
        type = "Dazed"
      } },
      ["2"] = { {
        type = "Dazed"
      } },
      ["3"] = { {
        type = "Dazed"
      } },
      ["4"] = { {
        type = "Hit",
        power = 3
      } },
      ["5"] = { {
        type = "Hit",
        power = 3
      } },
      ["6"] = { {
        type = "Hit",
        power = 3
      } }
    }
  },
  ["Acid Slime 1"] = {
    name = "Acid Slime 1",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Weak"
      } },
      ["2"] = { {
        type = "Weak"
      } },
      ["3"] = { {
        type = "Hit",
        power = 2
      } },
      ["4"] = { {
        type = "Hit",
        power = 2
      } },
      ["5"] = { {
        type = "Hit",
        power = 2
      }, {
        type = "Dazed"
      } },
      ["6"] = { {
        type = "Hit",
        power = 2
      }, {
        type = "Dazed"
      } }
    }
  },
  ["Acid Slime 2"] = {
    name = "Acid Slime 2",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Weak"
      } },
      ["2"] = { {
        type = "Weak"
      } },
      ["3"] = { {
        type = "Hit",
        power = 2
      }, {
        type = "Dazed"
      } },
      ["4"] = { {
        type = "Hit",
        power = 2
      }, {
        type = "Dazed"
      } },
      ["5"] = { {
        type = "Hit",
        power = 2
      } },
      ["6"] = { {
        type = "Hit",
        power = 2
      } }
    }
  },
  ["Acid Slime 4"] = {
    name = "Acid Slime 4",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 2
      } },
      ["2"] = { {
        type = "Hit",
        power = 2
      } },
      ["3"] = { {
        type = "Weak"
      } },
      ["4"] = { {
        type = "Weak"
      } },
      ["5"] = { {
        type = "Hit",
        power = 2
      }, {
        type = "Dazed"
      } },
      ["6"] = { {
        type = "Hit",
        power = 2
      }, {
        type = "Dazed"
      } }
    }
  },
  ["Acid Slime 3"] = {
    name = "Acid Slime 3",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 2
      }, {
        type = "Dazed"
      } },
      ["2"] = { {
        type = "Hit",
        power = 2
      }, {
        type = "Dazed"
      } },
      ["3"] = { {
        type = "Hit",
        power = 2
      } },
      ["4"] = { {
        type = "Hit",
        power = 2
      } },
      ["5"] = { {
        type = "Weak"
      } },
      ["6"] = { {
        type = "Weak"
      } }
    }
  },
  ["Large Slime 1"] = {
    name = "Large Slime 1",
    hp = 10,
    dieActions = {
      ["1"] = { {
        type = "Weak"
      }, {
        type = "Weak"
      } },
      ["2"] = { {
        type = "Weak"
      }, {
        type = "Weak"
      } },
      ["3"] = { {
        type = "Hit",
        power = 4
      } },
      ["4"] = { {
        type = "Hit",
        power = 4
      } },
      ["5"] = { {
        type = "Hit",
        power = 3
      }, {
        type = "Status green"
      }, {
        type = "Status green"
      } },
      ["6"] = { {
        type = "Hit",
        power = 3
      }, {
        type = "Status green"
      }, {
        type = "Status green"
      } }
    }
  },
  ["Large Slime 2"] = {
    name = "Large Slime 2",
    hp = 10,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 4
      } },
      ["2"] = { {
        type = "Hit",
        power = 4
      } },
      ["3"] = { {
        type = "Hit",
        power = 3
      }, {
        type = "Status green"
      }, {
        type = "Status green"
      } },
      ["4"] = { {
        type = "Hit",
        power = 3
      }, {
        type = "Status green"
      }, {
        type = "Status green"
      } },
      ["5"] = { {
        type = "Weak"
      }, {
        type = "Weak"
      } },
      ["6"] = { {
        type = "Weak"
      }, {
        type = "Weak"
      } }
    }
  },
  ["Large Slime 3"] = {
    name = "Large Slime 3",
    hp = 10,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 3
      }, {
        type = "Status green"
      }, {
        type = "Status green"
      } },
      ["2"] = { {
        type = "Hit",
        power = 3
      }, {
        type = "Status green"
      }, {
        type = "Status green"
      } },
      ["3"] = { {
        type = "Weak"
      }, {
        type = "Weak"
      } },
      ["4"] = { {
        type = "Weak"
      }, {
        type = "Weak"
      } },
      ["5"] = { {
        type = "Hit",
        power = 4
      } },
      ["6"] = { {
        type = "Hit",
        power = 4
      } }
    }
  },
  ["Fungi Beast"] = {
    name = "Fungi Beast",
    hp = 5,
    dieActions = {
      ["1"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Buff"
      } },
      ["2"] = { {
        type = "Hit",
        power = 1
      }, {
        type = "Buff"
      } },
      ["3"] = { {
        type = "Buff"
      } },
      ["4"] = { {
        type = "Buff"
      } },
      ["5"] = { {
        type = "Hit",
        power = 2
      } },
      ["6"] = { {
        type = "Hit",
        power = 2
      } }
    },
    abilities = { "Spore Cloud" }
  },
  ["Gremlin Wizard"] = {
    name = "Gremlin Wizard",
    hp = 4,
    cubeActions = { {
      isNotRepeated = true,
      actions = { }
    }, {
      actions = { {
        type = "Area of effect"
      }, {
        type = "Hit",
        power = 3
      } }
    } }
  },
        ["Acid Slime 1"] = {
          hp = 5,
          dieActions = {
            ["1"] = {
              {
                type = ACTION_TYPES.WEAK,
              }
            },
            ["2"] = {
              {
                type = ACTION_TYPES.WEAK,
              }
            },
            ["3"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              }
            },
            ["4"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              }
            },
            ["5"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
              {
                type = ACTION_TYPES.DAZED,
              }
            },
            ["6"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
              {
                type = ACTION_TYPES.DAZED,
              }
            },
          },
        },
        ["Acid Slime 2"] = {
          hp = 5,
          dieActions = {
            ["1"] = {
              {
                type = ACTION_TYPES.WEAK,
              }
            },
            ["2"] = {
              {
                type = ACTION_TYPES.WEAK,
              }
            },
            ["3"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
              {
                type = ACTION_TYPES.DAZED,
              }
            },
            ["4"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
              {
                type = ACTION_TYPES.DAZED,
              }
            },
            ["5"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              }
            },
            ["6"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              }
            },
          },
        },
        ["Acid Slime 3"] = {
          hp = 5,
          dieActions = {
            ["1"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
              {
                type = ACTION_TYPES.DAZED,
              }
            },
            ["2"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
              {
                type = ACTION_TYPES.DAZED,
              }
            },
            ["3"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
            },
            ["4"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
            },
            ["5"] = {
              {
                type = ACTION_TYPES.WEAK,
              }
            },
            ["6"] = {
              {
                type = ACTION_TYPES.WEAK,
              }
            },
          },
        },
        ["Acid Slime 4"] = {
          hp = 5,
          dieActions = {
            ["1"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              }
            },
            ["2"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              }
            },
            ["3"] = {
              {
                type = ACTION_TYPES.WEAK,
              }
            },
            ["4"] = {
              {
                type = ACTION_TYPES.WEAK,
              }
            },
            ["5"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
              {
                type = ACTION_TYPES.DAZED,
              }
            },
            ["6"] = {
              {
                type = ACTION_TYPES.HIT,
                power = 2
              },
              {
                type = ACTION_TYPES.DAZED,
              }
            },
          },
        },
      }
    },
    ["2"] = {},
    ["3"] = {}
  },
  neowBlessing = {
    ["998a64"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_RANDOM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE,
          }
        }
      }
    },
    ["6eeb68"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_POTION,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.TRANSFORM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE
          }
        }
      }
    },
    ["c21e95"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_RARE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 10
            }
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE
          }
        }
      }
    },
    ["199138"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_RARE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_TREASURE,
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["09c40f"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["9ce0e5"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_RANDOM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["cdd020"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      },
      {
        lastButtonBigger = true
      }
    },
    ["c60c9d"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.TRANSFORM_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 8
            }
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["f66dd3"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_POTION,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_TREASURE
          },
          {
            type = EFFECT_TYPES.LOSE_HP,
            payload = {
              amount = 2
            }
          }
        }
      }
    },
    ["ad34d0"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.TRANSFORM_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_POTION,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RARE_CARD
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE
          }
        }
      }
    },
    ["89a376"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_RARE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      }
    },
    ["29021f"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_COLORLESS_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        lastButtonBigger = true
      }
    },
    ["2b8654"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_GOLD,
            payload = {
              amount = 4
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RARE_CARD,
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      }
    },
    ["b50bdb"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_RANDOM_POTION,
            payload = {
              amount = 3
            }
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_TREASURE
          },
          {
            type = EFFECT_TYPES.GAIN_CURSE
          }
        }
      }
    },
    ["ed4ffd"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.TRANSFORM_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.REMOVE_CARD
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_RANDOM_CARD,
            payload = {
              amount = 2
            }
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      }
    },
    ["e7c18a"] = {
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_COLORLESS_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.UPGRADE_CARD,
          }
        }
      },
      {
        effects = {
          {
            type = EFFECT_TYPES.GAIN_TREASURE,
          },
          {
            type = EFFECT_TYPES.LOSE_GOLD,
            payload = {
              amount = 3
            }
          }
        }
      }
    }
  }
}

function waitFrames(frames) --This function can only be used inside a coroutine because it is using coroutine.yield()
   while frames > 0 do --loop until frames = 0
      coroutine.yield(0) --this will wait 1 frame, reguardless of the number put inside coroutine.yield(#)
      frames = frames - 1 --decrement frames every loop
   end
end

function myLog(text)
  log(text)
  log("---------------------------")
end

function getEnemyStats(arguments)
  local tag = arguments.tag
  local name = arguments.name
  local act = arguments.act
  if not GAME_DATA.isFirstEncounterDone and act == 1 and tag == "Encounter" then
    act = "First Encounter"
  end

  return CARDS_DATA.acts[tostring(act)][tag][name]
end

function getPlayingColors()
  local colors = {}
  for color, data in pairs(GAME_DATA.players) do
    if data.character ~= nil then
      table.insert(colors, color)
    end
  end
  return colors
end

function getPositionForGoldGain(arguments)
  local bowl = arguments.bowl
  local bowlBounds = bowl.getBounds()
  local playerBowlPosition = bowl.getPosition()
  local index = arguments.index or 0
  local position = {
    x = playerBowlPosition.x,
    y = playerBowlPosition.y + 3 + index * 0.3,
    z = playerBowlPosition.z,
  }
  return position
end

function getPositionForMap(arguments)
  local map = arguments.map
  local mapBounds = map.getBounds()
  local tableObject = Tables.getTableObject()
  local tableBounds = tableObject.getBounds()

  return {
    x = -tableBounds.size.x / 2 + mapBounds.size.x / 2 + 25,
    y = 2,
    z = tableBounds.center.z + 9,
  }
end

function handleGainGoldEffect(arguments)
  local amount = arguments.amount
  local color = arguments.color

  local goldBag1 = getObjectFromGUID(OBJECTS.goldBag1)
  local goldBag5 = getObjectFromGUID(OBJECTS.goldBag5)
  local remainingGold1 = #goldBag1.getObjects()
  local remainingGold5 = #goldBag5.getObjects()
  local remainingGoldTotal = remainingGold1 + remainingGold5 * 5

  local playerBowl = getObjectFromGUID(OBJECTS.playerGoldBowls[color])

  local index = 0
  if amount >= 5 and remainingGold5 == 0 then
    if remainingGold1 ~= 0 then
      while remainingGold1 ~= 0 and amount ~= 0 do
        goldBag1.takeObject({
          position = getPositionForGoldGain({
            bowl = playerBowl,
            index = index
          })
        })
        amount = amount - 1
        remainingGold1 = remainingGold1 - 1
        index = index + 1
        waitFrames(2)
      end
      return
    end
    print("Out of Gold. Can't gain any more.")
    return
  end

  while amount >= 5 and remainingGold5 ~= 0 do
    goldBag5.takeObject({
      position = getPositionForGoldGain({
        bowl = playerBowl,
        index = index
      })
    })
    amount = amount - 5
    remainingGold5 = remainingGold5 - 1
    index = index + 1
  end

  if amount == 0 then
    return
  end

  while remainingGold1 ~= 0 and amount ~= 0 do
    goldBag1.takeObject({
      position = getPositionForGoldGain({
        bowl = playerBowl,
        index = index
      })
    })
    amount = amount - 1
    remainingGold1 = remainingGold1 - 1
    index = index + 1
    waitFrames(2)
  end

  if amount ~= 0 then
    print("Out of Gold. Can't gain any more.")
  end
end

function calculatePlayerGold(arguments)
  local color = arguments.color
  local bowlZone = getObjectFromGUID(OBJECTS.playerGoldBowlScriptingZones[color])
  local objects = bowlZone.getObjects()
  local sum = 0
  for index, object in ipairs(objects) do
    if object.name == "Custom Token" then
      if object.getName() == "Gold" then
        sum = sum + 1
      end
      if object.getName() == "Gold 5" then
        sum = sum + 5
      end
    end
  end
  return sum
end

function handleLoseGoldEffect(arguments)
  local color = arguments.color
  local amount = arguments.amount
  local bowlZone = getObjectFromGUID(OBJECTS.playerGoldBowlScriptingZones[color])
  local objects = bowlZone.getObjects()
  local playerGold = calculatePlayerGold({
    color = color
  })
  local gold5Bag = getObjectFromGUID(OBJECTS.goldBag5)
  local gold1Bag = getObjectFromGUID(OBJECTS.goldBag1)
  local gold5Coins = {}
  local gold5CoinsLost = 0
  local gold1Coins = {}
  local gold1CoinsLost = 0

  for index, object in ipairs(objects) do
    if object.name == "Custom_Token" then
      if object.getName() == "Gold" then
        table.insert(gold1Coins, object)
      end
      if object.getName() == "Gold 5" then
        table.insert(gold5Coins, object)
      end
    end
  end

  while amount >=5 and gold5CoinsLost ~= #gold5Coins do
    gold5Bag.putObject(gold5Coins[gold5CoinsLost + 1])
    amount = amount - 5
    gold5CoinsLost = gold5CoinsLost + 1
  end
  while amount > 0 and gold1CoinsLost ~= #gold1Coins do
    gold1Bag.putObject(gold1Coins[gold1CoinsLost + 1])
    amount = amount - 1
    gold1CoinsLost = gold1CoinsLost + 1
  end
end

function handleGainCardEffect(arguments)
  local color = arguments.color
  local character = GAME_DATA.players[color].character
  local rewardsDeck = getObjectFromGUID(OBJECTS.characterDecks[character].rewardsDeck)


end

function handleEffect(arguments)
  function handleEffectCoroutine()
    local effect = arguments.effect
    local target = arguments.target

    if target.type == TARGET_TYPES.PLAYER then
      if target.payload == nil or target.payload.color == nil then
        return 1
      end

      local color = target.payload.color
      local amount = 1
      if effect.payload ~= nil and effect.payload.amount ~= nil then
        amount = effect.payload.amount
      end

      if effect.type == EFFECT_TYPES.GAIN_GOLD then
        handleGainGoldEffect({ amount = amount, color = color })
        return 1
      end

      if effect.type == EFFECT_TYPES.LOSE_GOLD then
        handleLoseGoldEffect({ amount = amount, color = color })
        return 1
      end

      if effect.type == EFFECT_TYPES.GAIN_CARD then
        handleGainCardEffect({ color = color })
        return 1
      end
    end

    return 1
  end

  startLuaCoroutine(self, "handleEffectCoroutine")
end

function onLoad()
  for index, color in ipairs({ "Red", "Green", "Blue", "Pink" }) do
    local handZone = getObjectFromGUID(OBJECTS.playerHands[color])
    handZone.setScale({
      x = 15.3268948,
      y = 11.8970528,
      z = 6.35014534
    })
    handZone.setPosition({
      x = -60 + 24 * index,
      y = 3.29337835,
      z = -34.42515,
    })
    handZone.setRotation({
      x = 0,
      y = 180,
      z = 0
    })
  end

  local boot = getObjectFromGUID(OBJECTS.boot)
  boot.use_snap_points = true
end

function getAssignedCharacterToPlayer(arguments)
  local color = arguments.color
  return GAME_DATA.players[color].character
end

function canAssignCharacterToPlayer(arguments)
  local character = arguments.character
  local color = arguments.color
  for color, data in pairs(GAME_DATA.players) do
    if data.character ~= nil and data.character == character then
      return false
    end
  end
  return true
end

function assignCharacterToPlayer(arguments)
  local character = arguments.character
  local color = arguments.color
  GAME_DATA.players[color].character = character
end

function canUnsignCharacterFromPlayer(arguments)
  local character = arguments.character
  local color = arguments.color

  return GAME_DATA.players[color].character ~= nil and
    GAME_DATA.players[color].character == character
end

function unsignCharacterFromPlayer(arguments)
  local color = arguments.color

  GAME_DATA.players[color].character = nil
end

function setupPlayerDecks(arguments)
  local color = arguments.color

  local handZone = getObjectFromGUID(OBJECTS.playerHands[color])
  local handZonePosition = handZone.getPosition()
  local character = GAME_DATA.players[color].character
  local characterBoard = getObjectFromGUID(OBJECTS.characterBoards[character])
  local characterBag = getObjectFromGUID(OBJECTS.characterBags[character])
  local boardBounds = characterBoard.getBoundsNormalized()

  local decksPosition = {
    x = handZonePosition.x - boardBounds.size.x / 2 - 1.2,
    y = handZonePosition.y,
    z = handZonePosition.z + 16
  }
  local starterDeck = characterBag.takeObject({
    position = decksPosition,
    rotation = {
      x = 0,
      y = 180,
      z = 180
    }
  })
  starterDeck.interactable = false
  starterDeck.shuffle()
  OBJECTS.characterDecks[character].starterDeck = starterDeck.guid

  local rewardsDeck = characterBag.takeObject({
    position = {
      x = decksPosition.x,
      y = decksPosition.y,
      z = decksPosition.z + 4
    },
    rotation = {
      x = 0,
      y = 180,
      z = 180
    }
  })
  rewardsDeck.interactable = false
  rewardsDeck.shuffle()
  OBJECTS.characterDecks[character].rewardsDeck = rewardsDeck.guid

  local rareDeck = characterBag.takeObject({
    position = {
      x = decksPosition.x,
      y = decksPosition.y,
      z = decksPosition.z + 8
    },
    rotation = {
      x = 0,
      y = 180,
      z = 180
    }
  })
  rareDeck.interactable = false
  rareDeck.shuffle()
  OBJECTS.characterDecks[character].rareDeck = rareDeck.guid
end

function getMapBossPosition(arguments)
  local mapObject = arguments.mapObject
  local startPosition = getMapStartPosition({
    mapObject = mapObject
  })
  return {
    x = startPosition.x + 0.25,
    y = startPosition.y,
    z = startPosition.z + 24.5
  }
end

function getMapCharacterPositions(arguments)
  local mapObject = arguments.mapObject
  local bounds = mapObject.getBounds()
  local position = mapObject.getPosition()
  local scale = mapObject.getScale()

  local positions = {}
  local positionsDone = 0
  while positionsDone ~= 4 do
    table.insert(positions, {
      x = position.x + bounds.size.x / 2 - 0.1 * scale.x,
      y = position.y,
      z = position.z - bounds.size.z / 2 + (0.2 + positionsDone * 0.435) * scale.z,
    })
    positionsDone = positionsDone + 1
  end
  return positions
end

function getMapCharacterSnapPoints(arguments)
  local mapObject = arguments.mapObject
  local characterPositions = getMapCharacterPositions({
    mapObject = mapObject
  })
  local snapPoints = {}
  for index, position in ipairs(characterPositions) do
    table.insert(snapPoints, {
      position = mapObject.positionToLocal(position)
    })
  end
  return snapPoints
end

function setupPlayerPlayZone(arguments)
  local color = arguments.color
  local playerBoard = getObjectFromGUID(OBJECTS.characterBoards[GAME_DATA.players[color].character])
  local playerBoardPosition = playerBoard.getPosition()
  local playerBoardBounds = playerBoard.getBounds()
  spawnObject({
    type = "ScriptingTrigger",
    position = {
      x = playerBoardPosition.x,
      y = playerBoardPosition.y,
      z = playerBoardPosition.z + playerBoardBounds.size.z / 2 + 6
    },
    scale = { 12, 0.7, 10 },
    callback_function = function(zone)
      local bounds = zone.getBounds()
      local position = zone.getPosition()
      myLog("Scripting play zone spawned for player("..color.."): "..zone.guid..".")

      playerBoard.UI.setAttribute("main", "active", "true")
    end
  })
end

function handleCombatCardClick()

end

function ishallowCopy(table)
  local copy = {}
  for index, element in ipairs(table) do
    copy[index] = element
  end
  return copy
end

function prepareEnemyAfterSpawn(arguments)
  local card = getObjectFromGUID(arguments.cardGuid)
  card.scale(1.7)
  card.interactable = false
  local cardBounds = card.getBounds()
  local cardPosition = card.getPosition()
  spawnObject({
    type = "ScriptingTrigger",
    position = cardPosition,
    scale = {
      x = cardBounds.size.x,
      y = cardBounds.size.y + 0.3,
      z = cardBounds.size.z,
    },
    callback_function = function(zone)
      myLog("Spawned scripting zone for card: "..zone.guid..".")
      OBJECTS.combat.zoneToEnemy[zone.guid] = card.guid
      OBJECTS.combat.enemyToZone[card.guid] = zone.guid
    end
  })
end

function afterEnemySpawns(arguments)
  local cardGuid = arguments.cardGuid
  local row = arguments.row
  local index = arguments.index
  prepareEnemyAfterSpawn({
    cardGuid = cardGuid
  })
  local act = GAME_DATA.act
  local card = getObjectFromGUID(cardGuid)
  local name = card.getName()
  local stats = getEnemyStats({
    act = act,
    name = name,
    tag = card.getTags()[1]
  })
  GAME_DATA.combat.enemies[cardGuid] = {
    guid = cardGuid,
    name = name,
    row = row,
    index = index,
    hp = stats.hp,
    effects = {}
  }
  myLog("Insert enemy data.\n"..JSON.encode_pretty(GAME_DATA.combat.enemies[cardGuid]))
end

function handleSummon(arguments)
  myLog("Start summoning all summons.")
  local act = GAME_DATA.act
  local summonQueue = GAME_DATA.combat.summonQueue
  local bagObject = getObjectFromGUID(OBJECTS.actDecksBag[act].base)
  local bagPosition = bagObject.getPosition()
  local summonDeck = bagObject.takeObject({
    index = 1,
    position = {
      x = bagPosition.x,
      y = bagPosition.y,
      z = bagPosition.z - 4,
    },
    callback_function = function(deck)
      myLog("Take out summon deck summoning.")
      local deckCards = deck.getObjects()
      local nameGuidMap = {}
      for index, card in ipairs(deckCards) do
        if nameGuidMap[card.name] == nil then
          nameGuidMap[card.name] = {}
        end
        table.insert(nameGuidMap[card.name], card.guid)
      end

      for index, data in ipairs(summonQueue) do
        local guid = data.cardGuid
        local ownerIndex = data.index
        local ownerRow = data.row
        local card = getObjectFromGUID(guid)
        local cardPosition = card.getPosition()
        local cardName = card.getName()
        local cardStats = getEnemyStats({
          act = act,
          tag = card.getTags()[1],
          name = cardName
        })
        local summons = cardStats.summons
        for index, summon in ipairs(summons) do
          local summoned = 0
          local variants = ishallowCopy(summon.variants)
          while summoned ~= summon.amount do
            local randomVariant = variants[math.random(#variants)]
            local guidTable = nameGuidMap[randomVariant]
            local randomN = math.random(#guidTable)
            local randomGuid = guidTable[math.random(#guidTable)]
            table.remove(guidTable, randomN)
            deck.takeObject({
              guid = randomGuid,
              position = {
                x = cardPosition.x + 5,
                y = cardPosition.y,
                z = cardPosition.z,
              },
              rotation = {
                x = 180,
                y = 0,
                z = 180
              },
              callback_function = function(card)
                afterEnemySpawns({
                  cardGuid = card.guid,
                  row = ownerRow,
                  index = ownerIndex + index - 1 + summoned
                })
              end
            })
            summoned = summoned + 1
          end
        end
      end

      GAME_DATA.combat.summonQueue = {}
    end
  })
end

function queueSummonFor(arguments)
  local cardGuid = arguments.cardGuid
  local row = arguments.row
  local index = arguments.index
  myLog("Queue summon for: "..cardGuid..".")
  table.insert(GAME_DATA.combat.summonQueue, {
    cardGuid = cardGuid,
    row = row,
    index = index
  })
end

function setupEncounter(arguments)
  local bag = arguments.bag
  local map = arguments.map
  local act = arguments.act
  local mapPosition = map.getPosition()
  local mapBounds = map.getBounds()

  GAME_DATA.combat.inProgress = true

  bag.takeObject({
    index = 0,
    rotation = {
      x = 0,
      y = 180,
      z = 180
    },
    position = {
      x = mapPosition.x + mapBounds.size.x / 2 + 2,
      y = mapPosition.y + mapBounds.size.y,
      z = mapPosition.z + mapBounds.size.z / 2 - 1.4
    },
    callback_function = function(deck)
      deck.shuffle()
      local characterPositions = getMapCharacterPositions({
        mapObject = map
      })
      local playingColors = getPlayingColors()
      for index, color in ipairs(playingColors) do
        deck.takeObject({
          flip = true,
          position = {
            x = characterPositions[index].x + 4,
            y = characterPositions[index].y,
            z = characterPositions[index].z
          },
          callback_function = function(card)
            local cardName = card.getName()
            local cardTag = card.getTags()[1]
            local cardStats = getEnemyStats({
              act = act,
              tag = cardTag,
              name = cardName
            })
            myLog("Card in combat: "..cardName..".")
            GAME_DATA.combat.encountersSetup = GAME_DATA.combat.encountersSetup + 1

            if cardStats.summons ~= nil and #cardStats.summons > 0 then
              queueSummonFor({
                act = act,
                cardGuid = card.guid,
                row = index,
                index = 1
              })
            end

            afterEnemySpawns({
              cardGuid = card.guid,
              row = index,
              index = 1,
            })

            if GAME_DATA.combat.encountersSetup == #getPlayingColors() then
              handleSummon()
            end
          end
        })
      end
      bag.putObject(deck)
    end
  })
end

function setupFirstEncounter()
  myLog("Start to setup first encounter.")
  local map = getObjectFromGUID(OBJECTS.actMaps[1])
  setupEncounter({
    bag = getObjectFromGUID(OBJECTS.firstEncounterBag),
    map = map,
    act = "First Encounter"
  })
end

function startFirstEncounter()
  setupFirstEncounter()
end

function startEncounter()

end

function handleNeowEffects(effects, color)
  function handleNeowEffectsCoroutine()
    if GAME_DATA.players[color].neowBonusDone then
      return 1
    end
    GAME_DATA.players[color].neowBonusDone = true
    for index, effect in ipairs(effects) do
      handleEffect({
        effect = effect,
        target = {
          type = TARGET_TYPES.PLAYER,
          payload = {
            color = color
          }
        }
      })
    end
    local card = getObjectFromGUID(OBJECTS.playerNeowBlessingCard[color])
    card.destruct()
    setupPlayerPlayZone({
      color = color
    })
    local playingColors = getPlayingColors()
    local colorsDoneNeowBonus = {}
    for index, color in ipairs(playingColors) do
      if GAME_DATA.players[color].neowBonusDone then
        table.insert(colorsDoneNeowBonus, color)
      end
    end
    if #playingColors == #colorsDoneNeowBonus then
      startFirstEncounter()
    end
    return 1
  end
  startLuaCoroutine(self, "handleNeowEffectsCoroutine")
end

function canPlayerClickNeowCard(neowCardGuid, color)
  return OBJECTS.playerNeowBlessingCard[color] == neowCardGuid
end

function handleNeowFirstClick(neowCard, color)
  if not canPlayerClickNeowCard(neowCard.guid, color) then
    return
  end
  local effects = CARDS_DATA.neowBlessing[neowCard.guid][1].effects
  local effectsJSON = JSON.encode_pretty(effects)
  myLog("Player("..color..") clicked 1st neow blessing option.\n"..effectsJSON)
  handleNeowEffects(effects, color)
end

function handleNeowSecondClick(neowCard, color)
  if not canPlayerClickNeowCard(neowCard.guid, color) then
    return
  end
  local effects = CARDS_DATA.neowBlessing[neowCard.guid][2].effects
  local effectsJSON = JSON.encode_pretty(effects)
  myLog("Player("..color..") clicked 2nd neow blessing option.\n"..effectsJSON)
  handleNeowEffects(effects, color)
end

function handleNeowThirdClick(neowCard, color)
  if not canPlayerClickNeowCard(neowCard.guid, color) then
    return
  end
  local effects = CARDS_DATA.neowBlessing[neowCard.guid][3].effects
  local effectsJSON = JSON.encode_pretty(effects)
  myLog("Player("..color..") clicked 3rd neow blessing option.\n"..effectsJSON)
  handleNeowEffects(effects, color)
end

function setupPlayers(arguments)
  local players = arguments.players
  local act = arguments.act
  function setupPlayersCoroutine()
    Hands.enable = true
    for index, color in ipairs(players) do
      local character = GAME_DATA.players[color].character
      local characterBoard = getObjectFromGUID(OBJECTS.characterBoards[character])
      characterBoard.call("setupForPlayer", {
        color = color
      })
    end

    waitFrames(500)

    local actMap = getObjectFromGUID(OBJECTS.actMaps[act])
    local characterPositions = getMapCharacterPositions({
      mapObject = actMap
    })
    for index, color in ipairs(players) do
      local playerFigure = getObjectFromGUID(OBJECTS.characterFigures[GAME_DATA.players[color].character])
      local position = characterPositions[index]
      playerFigure.scale(1.4)
      playerFigure.setPositionSmooth({
        x = position.x,
        y = position.y + 2,
        z = position.z
      })
    end

    local neowBlessingDeck = getObjectFromGUID(OBJECTS.neowBlessingDeck)
    neowBlessingDeck.shuffle()
    for index, color in ipairs(players) do
      setupPlayerDecks({
        color = color
      })
      local characterBoard = getObjectFromGUID(OBJECTS.characterBoards[GAME_DATA.players[color].character])
      local boardPosition = characterBoard.getPosition()
      local boardBounds = characterBoard.getBounds()

      local bowl = spawnObject({
        type = "Bowl",
        scale = {
          0.7, 0.7, 0.7
        },
        position = {
          x = boardPosition.x + boardBounds.size.x / 2 + 1.6,
          y = boardPosition.y,
          z = boardPosition.z + 2
        },
        callback_function = function(object)
          myLog("Gold bowl spawned for player("..color.."): "..object.guid..".")
          object.locked = true
          local bounds = object.getBounds()
          local position = object.getPosition()
          local zone = spawnObject({
            type = "ScriptingTrigger",
            scale = {
              bounds.size.x, bounds.size.y + 5, bounds.size.z
            },
            position = position,
            callback_function = function(scriptingZone)
              myLog("Gold bowl scripting zone spawned for player("..color.."): "..scriptingZone.guid..".")
            end
          })
          OBJECTS.playerGoldBowlScriptingZones[color] = zone.guid
        end
      })
      OBJECTS.playerGoldBowls[color] = bowl.guid

      local neowCard = neowBlessingDeck.takeObject({
        position = {
          x = boardPosition.x,
          y = boardPosition.y,
          z = boardPosition.z + 10
        },
        flip = true
      })
      local neowCardScale = neowCard.getScale().x
      if (neowCardScale < 2) then
        neowCard.scale(3)
      end
      neowCard.locked = true
      waitFrames(250)
      local buttonPositions = {
        {
          0.02, 0.6, 0.868
        },
        {
          0.02, 0.6, 1.08
        },
        {
          0.02, 0.6, 1.314
        }
      }
      local buttonScales = {
        { 1, 1, 0.7 },
        { 1, 1, 0.7 },
        { 1, 1, 0.7 }
      }
      if CARDS_DATA.neowBlessing[neowCard.guid][4] ~= nil and
        CARDS_DATA.neowBlessing[neowCard.guid][4].lastButtonBigger then
          buttonPositions[1][3] = 0.786
          buttonPositions[2][3] = 1
          buttonPositions[3][3] = 1.28
          buttonScales[3][3] = 1.3
      end
      neowCard.createButton({
        click_function = "handleNeowFirstClick",
        function_owner = self,
        width = 900,
        height = 7,
        position = buttonPositions[1],
        color = { 0, 0, 0, 0 },
        scale = buttonScales[1]
      })
      neowCard.createButton({
        click_function = "handleNeowSecondClick",
        function_owner = self,
        width = 900,
        height = 7,
        position = buttonPositions[2],
        color = { 0, 0, 0, 0 },
        scale = buttonScales[2]
      })
      neowCard.createButton({
        click_function = "handleNeowThirdClick",
        function_owner = self,
        width = 900,
        height = 7,
        position = buttonPositions[3],
        color = { 0, 0, 0, 0 },
        scale = buttonScales[3]
      })
      OBJECTS.playerNeowBlessingCard[color] = neowCard.guid

      handleEffect({
        effect = {
          type = EFFECT_TYPES.GAIN_GOLD,
          payload = {
            amount = 3
          }
        },
        target = {
          type = TARGET_TYPES.PLAYER,
          payload = {
            color = color
          }
        }
      })
    end

    return 1
  end

  startLuaCoroutine(self, "setupPlayersCoroutine")
end

function setupMapCharacterSnapPoints(arguments)
  local mapObject = arguments.mapObject
  local characterSnapPoints = getMapCharacterSnapPoints({
    mapObject = mapObject
  })
  local snapPoints = mapObject.getSnapPoints()
  for index = 1, #characterSnapPoints do
    snapPoints[#snapPoints + 1] = characterSnapPoints[index]
  end
  mapObject.setSnapPoints(snapPoints)
end

function getMapStartPosition(arguments)
  local mapObject = arguments.mapObject
  local position = mapObject.getPosition()
  local bounds = mapObject.getBounds()

  return {
    x = position.x - 1.3,
    y = position.y + bounds.size.y,
    z = position.z - bounds.size.z / 2 + 1.75
  }
end

function setupAct(arguments)
  function setupActCoroutine()
    local act = arguments.act
    local actMap = getObjectFromGUID(OBJECTS.actMaps[act])
    local tableObject = Tables.getTableObject()
    local tableBounds = tableObject.getBounds()

    actMap.scale(1.7)
    local actMapBounds = actMap.getBounds()
    actMap.setPositionSmooth(getPositionForMap({
      map = actMap
    }))
    actMap.interactable = false

    waitFrames(550)
    actMap.locked = true
    actMap.call("setup")
    local bootObject = getObjectFromGUID(OBJECTS.boot)
    bootObject.setPositionSmooth(getMapStartPosition({
      mapObject = actMap
    }))

    local actDecksBag = getObjectFromGUID(OBJECTS.actDecksBag[act].base)
    local bossMapPosition = getMapBossPosition({
      mapObject = actMap
    })
    local bossDeck = actDecksBag.takeObject({
      index = 4,
      position = bossMapPosition
    })
    bossDeck.shuffle()
    local bossObject = bossDeck.takeObject({
      position = {
        x = bossMapPosition.x,
        y = bossMapPosition.y,
        z = bossMapPosition.z,
      }
    })
    actDecksBag.putObject(bossDeck)
    bossObject.scale(1.6)

    local mapRotation = actMap.getRotation()
    local whiteTokensBag = getObjectFromGUID(OBJECTS.whiteMapTokensBag)
    whiteTokensBag.shuffle()
    local startRelativePositions = actMap.getTable("START_RELATIVE_POSITIONS");
    local whiteTokenWorldPositions = actMap.call("startRelativePositionsToWorld", {
      positions = startRelativePositions.whiteTokens
    })
    local whiteTokensBag = getObjectFromGUID(OBJECTS.whiteMapTokensBag)
    whiteTokensBag.shuffle()
    local blackTokenWorldPositions = actMap.call("startRelativePositionsToWorld", {
      positions = startRelativePositions.blackTokens
    })
    local blackTokensBag = getObjectFromGUID(OBJECTS.blackMapTokensBag)
    blackTokensBag.shuffle()

    for index, position in ipairs(whiteTokenWorldPositions) do
      whiteTokensBag.takeObject({
        position = position,
        rotation = mapRotation
      })
    end
    for index, position in ipairs(blackTokenWorldPositions) do
      blackTokensBag.takeObject({
        position = position,
        rotation = mapRotation
      })
    end

    return 1
  end

  startLuaCoroutine(self, "setupActCoroutine")
end

function onObjectPickUp(color, object)
  local isCombat = GAME_DATA.combat.inProgress
  if isCombat and object.name == "Card" and
    not GAME_DATA.combat.reducedCards[object.guid] then
      object.scale(0.6)
      GAME_DATA.combat.reducedCards[object.guid] = true
  end
end

function onObjectEnterZone(zone, object)
  local isCombat = GAME_DATA.combat.inProgress
  if isCombat then
    local enemyGuid = OBJECTS.combat.zoneToEnemy[zone.guid]
    if enemyGuid ~= nil then
      local enemy = getObjectFromGUID(enemyGuid)
      local stats = getEnemyStats({
        act = GAME_DATA.act,
        tag = enemy.getTags()[1],
        name = enemy.getName()
      })
      myLog("Object enter into "..enemy.getName()..".")
    end
  end
end

function startGame()
  myLog("Starting game...")
  local allPlayers = {}
  for color, data in pairs(GAME_DATA.players) do
    if data.character ~= nil then
      table.insert(allPlayers, color)
    end
  end
  local startMenu = getObjectFromGUID(OBJECTS.startMenu)
  startMenu.destruct()
  setupAct({
    act = GAME_DATA.act
  })
  setupPlayers({
    players = allPlayers,
    act = GAME_DATA.act
  })
end
