function createMachine()

end

CHARACTERS = {"Ironclad", "Silent", "Defect", "Watcher"}
PLAYERS_DATA = {
  Red = {},
  Green = {},
  Blue = {},
  Pink = {},
}

OBJECTS = {
  characterBoards = {
    [CHARACTERS[1]] = "63f2c4",
    [CHARACTERS[2]] = "9ee996",
    [CHARACTERS[3]] = "b293d2",
    [CHARACTERS[4]] = "60b3de"
  },
  playerHands = {
    Red = "198286",
    Green = "761a86",
    Blue = "507348",
    Pink = "32fa24"
  }
}

function onLoad()
  for index, color in ipairs({ "Red", "Green", "Blue", "Pink" }) do
    local handZone = getObjectFromGUID(OBJECTS.playerHands[color])
    handZone.setScale({
      x = 15.3268948,
      y = 11.8970528,
      z = 6.35014534
    })
    handZone.setPosition({
      x = -60 + 24 * index,
      y = 3.29337835,
      z = -34.42515,
    })
    handZone.setRotation({
      x = 0,
      y = 180,
      z = 0
    })
  end
end

function onObjectPickUp(playerColor, pickedUpObject)
  print(playerColor)
  print(pickedUpObject.name)
  print(pickedUpObject.guid)
end

function getAssignedCharacterToPlayer(arguments)
  local color = arguments.color
  return PLAYERS_DATA[color].character
end

function canAssignCharacterToPlayer(arguments)
  local character = arguments.character
  local color = arguments.color
  for color, data in pairs(PLAYERS_DATA) do
    if data.character != nil and data.character == character then
      return false
    end
  end
  return true
end

function assignCharacterToPlayer(arguments)
  local character = arguments.character
  local color = arguments.color
  PLAYERS_DATA[color].character = character
end

function canUnsignCharacterFromPlayer(arguments)
  local character = arguments.character
  local color = arguments.color

  return PLAYERS_DATA[color].character != nil and
    PLAYERS_DATA[color].character == character
end

function unsignCharacterFromPlayer(arguments)
  local color = arguments.color

  PLAYERS_DATA[color].character = nil
end

local gameStateMachine = createMachine({
  initial = "Idle",
  states = {
    Idle = {
      on = {
        startGame = {
          target = "Starting"
        }
      }
    },
    Starting = {
      initial = "SetupInProgress",
      states = {
        SetupInProgress = {
          on = {
            endSetup = {
              target = "SetupDone"
            }
          }
        },
        SetupDone = {
          type = "final"
        }
      },
      onDone = {
        target = "Ready"
      }
    },
    Ready = {
      type = "final"
    }
  }
})

function startGame()
  log("Starting game...")
  log(JSON.encode_pretty(PLAYERS_DATA))

  local all_players = {}
  for color, data in pairs(PLAYERS_DATA) do
    if data.character != nil then
      table.insert(all_players, color)
    end
  end

  log("All players:")
  log(JSON.encode_pretty(all_players))
end