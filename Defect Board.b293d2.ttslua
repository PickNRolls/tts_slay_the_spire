function waitFrames(frames) --This function can only be used inside a coroutine because it is using coroutine.yield()
   while frames > 0 do --loop until frames = 0
      coroutine.yield(0) --this will wait 1 frame, reguardless of the number put inside coroutine.yield(#)
      frames = frames - 1 --decrement frames every loop
   end
end

function onLoad()
  OBJECTS = {
    hpToken = nil,
    energyToken = nil,
    blockToken = nil,
  }
end

function setupForPlayer(arguments)
  function setupCoroutine()
    local GLOBAL_OBJECTS = Global.getTable("OBJECTS")
    local players = Global.getTable("GAME_DATA").players
    local color = arguments.color
    local handZone = getObjectFromGUID(GLOBAL_OBJECTS.playerHands[color])
    local character = players[color].character
    local characterBoard = getObjectFromGUID(GLOBAL_OBJECTS.characterBoards[character])
    local characterBag = getObjectFromGUID(GLOBAL_OBJECTS.characterBags[character])
    characterBoard.scale(1.8)
    local boardBounds = characterBoard.getBoundsNormalized()
    local handZonePosition = handZone.getPosition()
    characterBoard.setPositionSmooth({
      x = handZonePosition.x,
      y = handZonePosition.y,
      z = handZonePosition.z + 10
    }, false, false)
    characterBoard.interactable = false

    waitFrames(500)

    local boardPosition = characterBoard.getPosition()
    local lightningOrbToken = characterBag.takeObject({
      position = {
        x = boardPosition.x + 3.25,
        y = boardPosition.y + 1,
        z = boardPosition.z + 0.2,
      }
    })
    lightningOrbToken.interactable = false
    local energyToken = characterBag.takeObject({
      position = {
        x = boardPosition.x - 4.1,
        y = boardPosition.y + 1,
        z = boardPosition.z + boardBounds.size.z / 2 + -1.4,
      }
    })
    energyToken.interactable = false
    OBJECTS.energyToken = energyToken.guid
    energyToken.setColorTint({
      r = 81/255,
      g = 1,
      b = 1
    })
    local blockToken = characterBag.takeObject({
      position = {
        x = boardPosition.x - 6.2,
        y = boardPosition.y + 1,
        z = boardPosition.z + boardBounds.size.z / 2 + -3.6,
      }
    })
    blockToken.interactable = false
    OBJECTS.blockToken = blockToken.guid
    local hpToken = characterBag.takeObject({
      position = {
        x = boardPosition.x + 1.1,
        y = boardPosition.y + 1,
        z = boardPosition.z + boardBounds.size.z / 2 + -5.8,
      }
    })
    hpToken.interactable = false
    OBJECTS.hpToken = hpToken.guid

    return 1
  end

  startLuaCoroutine(self, "setupCoroutine")
end

function setBlock(arguments)
  local amount = arguments.amount
  local blockToken = getObjectFromGUID(OBJECTS.blockToken)
  local GLOBAL_OBJECTS = Global.getTable("OBJECTS")
  local characterBoard = getObjectFromGUID(GLOBAL_OBJECTS.characterBoards.Defect)
  local boardPosition = characterBoard.getPosition()
  local boardBounds = characterBoard.getBounds()

  blockToken.setPositionSmooth({
    x = boardPosition.x - 6.23 + 0.72 * amount,
    y = boardPosition.y + 1,
    z = boardPosition.z + boardBounds.size.z / 2 + -3.6,
  })
end